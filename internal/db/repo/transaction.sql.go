// Code generated by sqlc. DO NOT EDIT.
// source: transaction.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (user_id, amount, type, status)
VALUES ($1, $2, $3, $4) 
RETURNING id, user_id, amount, type, status, created_at
`

type CreateTransactionParams struct {
	UserID int64             `json:"user_id"`
	Amount int64             `json:"amount"`
	Type   TransactionType   `json:"type"`
	Status TransactionStatus `json:"status"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.Amount,
		arg.Type,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, user_id, amount, type, status, created_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET status = $2
WHERE id = $1
RETURNING id, user_id, amount, type, status, created_at
`

type UpdateTransactionParams struct {
	ID     int64             `json:"id"`
	Status TransactionStatus `json:"status"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction, arg.ID, arg.Status)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
